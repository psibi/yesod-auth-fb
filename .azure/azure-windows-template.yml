jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      GHC 8.4:
        ARGS: "--resolver lts-12"
      GHC 8.6:
        ARGS: "--resolver lts-14"
      GHC 8.8:
        ARGS: "--resolver lts-15"
  variables:
    CACHE_STACK_ROOT: "$(Build.SourcesDirectory)/.stack-root"
    CACHE_STACK_WORK: "$(Build.SourcesDirectory)/.stack-work"
  steps:
  - checkout: self
    submodules: true
  - bash: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export STACK_WORK=".stack-work";
      curl -sSkL http://www.stackage.org/stack/windows-x86_64 -o /usr/bin/stack.zip
      unzip -o /usr/bin/stack.zip -d /usr/bin/
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Stack Installation'
  - bash: |
      export PATH=$HOME/.local/bin:$PATH
      export CACHE_PGM_DIR="C:\Users\VssAdministrator\AppData\Local\Programs\stack\x86_64-windows"
      echo "##vso[task.setvariable variable=CACHE_ROOT]$CACHE_STACK_ROOT"
      echo "##vso[task.setvariable variable=CACHE_WORK]$CACHE_STACK_WORK"
      echo "##vso[task.setvariable variable=CACHE_PROGRAMS]$CACHE_PGM_DIR"
    displayName: 'Set Cache Variables'
  - task: Cache@2
    inputs:
      key: "stack-root $(Agent.OS) | $(ARGS) | stack.yaml"
      restoreKeys: |
        "stack-root $(Agent.OS) | $(ARGS)"
        "stack-root $(Agent.OS)"
      path: $(CACHE_ROOT)
    displayName: Cache Stack root
  - task: Cache@2
    inputs:
      key: "stack-work $(Agent.OS) | $(ARGS) | stack.yaml"
      restoreKeys: |
        "stack-work $(Agent.OS) | $(ARGS)"
        "stack-work $(Agent.OS)"
      path: $(CACHE_WORK)
    displayName: Cache Stack work
  - task: Cache@2
    inputs:
      key: "stack-programs $(Agent.OS) | $(ARGS) | stack.yaml"
      restoreKeys: |
        "stack-programs $(Agent.OS) | $(ARGS)"
        "stack-programs $(Agent.OS)"
      path: $(CACHE_PROGRAMS)
    displayName: Cache Stack programs
  - bash: |
      export PATH=$HOME/.local/bin:$PATH
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export STACK_WORK=".stack-work";
      echo debug1
      echo $CACHE_PROGRAMS
      echo debug2
      echo $PGM
      echo debug3
      stack $ARGS --version
      echo debug4
      stack $ARGS path
      echo debug5
      export PGM=$(stack $ARGS path --programs 2> /dev/null);
      echo debug6
      test $CACHE_PROGRAMS = $PGM
    displayName: 'Test cache paths'
  - bash: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      stack $ARGS build
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Build and test'
