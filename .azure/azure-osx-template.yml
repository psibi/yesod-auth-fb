jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 120
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      GHC 8.4:
        ARGS: "--resolver lts-12"
      GHC 8.6:
        ARGS: "--resolver lts-14"
      GHC 8.8:
        ARGS: "--resolver lts-15"
      nightly:
        ARGS: "--resolver nightly"
  variables:
    CACHE_STACK_ROOT: "$(Build.SourcesDirectory)/.stack-root"
    CACHE_STACK_WORK: "$(Build.SourcesDirectory)/.stack-work"
  steps:
  - checkout: self
    submodules: true
  - script: |
      export PATH=$HOME/.local/bin:$PATH
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export STACK_WORK=".stack-work";
      mkdir -p ~/.local/bin
      curl -skL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin;
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Stack Installation'
  - bash: |
      export PATH=$HOME/.local/bin:$PATH
      export CACHE_PGM_DIR=$PWD/.stack-root/programs/x86_64-osx
      echo "##vso[task.setvariable variable=CACHE_ROOT]$CACHE_STACK_ROOT"
      echo "##vso[task.setvariable variable=CACHE_WORK]$CACHE_STACK_WORK"
      echo "##vso[task.setvariable variable=CACHE_PROGRAMS]$CACHE_PGM_DIR"
    displayName: 'Set Cache Variables'
  - task: Cache@2
    inputs:
      key: "stack-root | $(Agent.OS) | $(ARGS) | stack.yaml"
      restoreKeys: |
        "stack-root | $(Agent.OS) | $(ARGS)"
        "stack-root | $(Agent.OS)"
      path: $(CACHE_ROOT)
    displayName: Cache Stack root
  - task: Cache@2
    inputs:
      key: "stack-work | $(Agent.OS) | $(ARGS) | stack.yaml"
      restoreKeys: |
        "stack-work | $(Agent.OS) | $(ARGS)"
        "stack-work | $(Agent.OS)"
      path: $(CACHE_WORK)
    displayName: Cache Stack work
  - task: Cache@2
    inputs:
      key: "stack-programs | $(Agent.OS) | $(ARGS) | stack.yaml"
      restoreKeys: |
        "stack-programs | $(Agent.OS) | $(ARGS)"
        "stack-programs | $(Agent.OS)"
      path: $(CACHE_PROGRAMS)
    displayName: Cache Stack programs
  - script: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$HOME/.local/bin:$PATH
      stack $ARGS setup
      stack $ARGS build
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Build and Test'
  - bash: |
      export PATH=$HOME/.local/bin:$PATH
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export STACK_WORK=".stack-work";
      stack $ARGS setup
      echo $CACHE_PROGRAMS
      stack $ARGS --version
      stack $ARGS path
      export PGM=$(stack $ARGS path --programs 2> /dev/null);
      test $CACHE_PROGRAMS = $PGM
    displayName: 'Test cache paths'
